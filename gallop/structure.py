import gallop.z_matrix as zm
import gallop.files as files

import numpy as np
import torch
import json
import os
from collections import OrderedDict
import pymatgen as pmg
from pymatgen.symmetry import groups
from pymatgen.io import cif
from pymatgen.symmetry.analyzer import SpacegroupAnalyzer
from pymatgen.core.operations import SymmOp
from pymatgen.io.cif import CifBlock, CifFile
from monty.io import zopen


class Structure(object):
    """
    The main class used in GALLOP to hold all of the information
    about a crystal structure that is needed for SDPD attempts.

    Before SDPD can be attempted, the following numpy arrays are
    needed:
        - hkl = Structure.hkl
        - intensities = Structure.intensities
        - inverse_covariance_matrix = structure.inverse_covariance_matrix
    As well as:
        - zmatrices populated with GALLOP Z_matrix objects all of
            the ZMs in the asymmetric unit
            Stored in Structure.zmatrices (list of Z-matrix objects)
        - Structure.lattice = pymatgen lattice
        - Structure.space_group = pymatgen space_group
        - Structure.sg_number = sg_number (integer)
        - Structure.centrosymmetric = centrosymmetric (bool)

    If using files generated by Pawley fitting the data with DASH,
    helper functions are available to automate the population of
    the required arrays and parameters.

    """
    def __init__(self, DASH_sdi=None, name="Gallop_structure",
                wavelength=1.54056, ignore_H_atoms=True,
                absorb_H_Z_increase=False,
                absorb_H_occu_increase=False):
        """
        Args:
            DASH_sdi (str, optional): Filename of a DASH .sdi file.
                Used to populate the hkl, intensities, pymatgen lattice
                and inverse_covariance_matrix arrays, as well as
                supply the space_group. Defaults to None.
            name (str, optional): The root name to be used for
                writing CIFs during SDPD attempts. Defaults to
                "Gallop_structure".
            wavelength (float, optional): Wavelength of experimental
                data collection. Not needed for SDPD, but allows data
                resolution to be calculated and printed.
                Defaults to 1.54056 (CuKa1)
            ignore_H_atoms (bool, optional): Ignore H-atoms during
                SDPD. Setting this to True, and
                absorb_H_occu_increase and absorb_H_Z_increase to
                False will simply ignore the presence of H atoms.
                Defaults to True.
            absorb_H_Z_increase (bool, optional): If ignore_H_atoms,
                offset the loss of electrons in unit cell by
                increasing the atomic number of the non-H atoms by
                the number of connected H atoms. Defaults to False.
            absorb_H_occu_increase (bool, optional): If ignore_H_atoms,
                offset the loss of electrons in the unit cell by
                increasing the occupancy of the non-H atoms by
                a factor of (1 + n_H_connected_expanded)/non_H(Z).
                Defaults to False.
        """
        self.name = name
        self.ignore_H_atoms = ignore_H_atoms
        self.output_filename_root = name
        if DASH_sdi is not None:
            self.add_data(DASH_sdi, wavelength=wavelength)
        self.wavelength = wavelength
        self.zmatrices = []
        self.absorb_H_Z_increase = absorb_H_Z_increase
        self.absorb_H_occu_increase = absorb_H_occu_increase
        self.original_sg_number = None
        self.total_dof_calculated = False

    def __repr__(self):
        return self.name

    def add_zmatrix(self, filename, verbose=True):
        """
        Create and add a z-matrix object to the Structure

        Args:
            filename (str): filename of the Z-matrix
            verbose (bool, optional): Print out information. Defaults to True.
        """
        self.zmatrices.append(zm.Z_matrix(filename))
        if verbose:
            print("Added Z-matrix with",self.zmatrices[-1])

    def get_resolution(self, twotheta, decimal_places=3):
        """
        Calculate the d-spacing of a given twotheta value using Bragg's law

        Args:
            twotheta (float): The twotheta value of interest
            decimal_places (int, optional): Number of decimal_places to restrict
                the result to. Defaults to 3.

        Returns:
            float: the d-spacing of a twotheta value
        """
        d = self.wavelength / (2*np.sin(np.deg2rad(twotheta/2)))
        return (np.around(d, decimal_places))

    def add_data(self, filename, source="DASH", wavelength=None,
                percentage_cutoff_inv_cov=20):
        """
        Add PXRD data to a Z-matrix

        Args:
            filename (str): filename of file from which to read the data
            source (str, optional): data source. Currently only "DASH" is
                accepted as an argument. More programs may be added in the
                future. Defaults to "DASH".
            wavelength (float, optional): The wavelength at which the data were
                recorded. This is not needed for crystal structure determination
                and is only used to print out information about data resolution.
                Defaults to 1.54056 (Cu Ka1).
            percentage_cutoff_hcv (int, optional): the minimum percentage
            correlation to be included in the inverse covariance
            matrix. Defaults to 20 to be comparable with DASH,
            however, this doesn't affect the speed of GALLOP so can
            be set as desired without impacting performance.
        """
        if source.lower() == "dash":
            files.get_data_from_DASH_sdi(self,filename,
                        percentage_cutoff_inv_cov=percentage_cutoff_inv_cov)
            if wavelength is not None:
                self.wavelength = wavelength
            self.dspacing = self.get_resolution(self.twotheta)
            self.data_resolution = self.get_resolution(self.twotheta[-1])
        elif "gsas" in source.lower():
            files.get_data_from_GSAS_gpx(self,filename,
                            percentage_cutoff_inv_cov=percentage_cutoff_inv_cov)
            if wavelength is not None:
                self.wavelength = wavelength
            self.data_resolution = self.dspacing[-1]
        elif "topas" == source.lower():
            files.get_data_from_TOPAS_output(self,filename,
                            percentage_cutoff_inv_cov=percentage_cutoff_inv_cov)
            if wavelength is not None:
                self.wavelength = wavelength

        else:
            print("This program is not yet supported.")
            print("Currently supported programs:")
            print(" - DASH")
            print(" - GSAS-II")
            #print(" - TOPAS")

    def check_centre_of_symmetry(self):
        """
        Check if a structure is centrosymmetric

        Args:
            Structure (class):  GALLOP Structure with a space_group
                                assigned
        Returns:
            bool: True if centrosymmetric
        """
        laue = ["-1", "2/m", "mmm", "4/m", "4/mmm",
                    "-3", "-3m", "6/m", "6/mmm", "m-3", "m-3m"]
        return self.space_group.point_group in laue

    def get_affine_matrices(self):
        """
        Get the affine matrices of the space group
        Used as a fall-back (generic) method for structure factor
        calculation.

        GALLOP Structure must have a pymatgen space_group assigned

        Returns:
            numpy array:    affine matrices for the space group
                            of shape (n,4,4) where n is the number
                            of equivalent positions for the space
                            group.
        """
        affine_matrices = []
        for op in self.space_group.symmetry_ops:
            affine_matrices.append(op.affine_matrix)
        return np.array(affine_matrices)

    def generate_intensity_calculation_prefix(self,
                                            debye_waller_factors={},
                                            just_asymmetric=False,
                                            from_cif=False):
        """
        Much of this code is directly adapted from the PyMatGen code
        for PXRD pattern generation, which can be found here:
        https://pymatgen.org/pymatgen.analysis.diffraction.xrd.html
        A few modifications have been added to, for example, "absorb"
        H atoms by increasing the atomic number used to calculate
        atomic form factors, or increase the occupancy of the non-H
        atoms.

        If reading directly from a CIF then the atomic coordinates
        are used. If not reading from a CIF, then a dummy structure
        is created in order to extract the required information.
        This can either just be the atoms in the asymmetric unit,
        or the whole unit cell.
        """
        if len(self.zmatrices) == 0 and not from_cif:
            print("No Z-matrices have been added!")
        else:
            if not from_cif:
                all_atoms_coords = []
                all_atoms_elements = []
                all_atoms_n_H_connected = []
                for zm in self.zmatrices:
                    if self.ignore_H_atoms:
                        all_atoms_coords.append(
                            zm.initial_cartesian_no_H)
                        all_atoms_elements.append(
                            zm.elements_no_H)
                        all_atoms_n_H_connected.append(
                            zm.n_H_connected)
                    else:
                        all_atoms_coords.append(zm.initial_cartesian)
                        all_atoms_elements.append(zm.elements)

                all_atoms_coords = np.vstack(all_atoms_coords)
                all_atoms_elements = np.hstack(all_atoms_elements)
                if self.ignore_H_atoms:
                    all_atoms_n_H_connected = np.hstack(
                                            all_atoms_n_H_connected)
                else:
                    all_atoms_n_H_connected = np.array(
                                            all_atoms_n_H_connected)

                fractional_coords = np.dot(all_atoms_coords,
                                            self.lattice.inv_matrix)
            else:
                if self.ignore_H_atoms:
                    fractional_coords = self.cif_frac_coords_no_H
                    all_atoms_elements = self.cif_species_no_H
                else:
                    fractional_coords = self.cif_frac_coords
                    all_atoms_elements = self.cif_species
                just_asymmetric = True

            if not just_asymmetric:
                """
                Apply symmetry of space group to locate all atoms
                within the unit cell. This is a dummy structure,
                and the purpose is only to extract the atomic
                scattering parameters etc, which are independent
                of position in the unit cell.
                """
                species_expanded = []
                fractional_expanded = []
                n_H_connected_expanded = []
                wxyz = np.vstack((fractional_coords.T, np.ones((1,
                                    fractional_coords.shape[0]))))
                for am in self.affine_matrices:
                    fractional_expanded.append(np.dot(am,
                                                    wxyz).T[:,:3])
                    species_expanded.append(all_atoms_elements)
                    n_H_connected_expanded.append(
                                            all_atoms_n_H_connected)
                species_expanded = np.array(species_expanded).ravel()
                fractional_expanded = np.vstack(fractional_expanded)
                n_H_connected_expanded = np.hstack(
                                            n_H_connected_expanded)
            else:
                species_expanded = all_atoms_elements
                fractional_expanded = fractional_coords
                if not from_cif:
                    n_H_connected_expanded = all_atoms_n_H_connected

            with open(os.path.join("gallop","atomic_scattering_params.json")) as f:
                ATOMIC_SCATTERING_PARAMS = json.load(f)
            f.close()

            zs = []
            coeffs = []
            occus = []
            dwfactors = []
            atomic_symbols = {
                1 : "H", 2 : "He", 3 : "Li", 4 : "Be", 5 : "B",
                6 : "C", 7 : "N", 8 : "O", 9 : "F", 10 : "Ne",
                11 : "Na", 12 : "Mg", 13 : "Al", 14 : "Si", 15 : "P",
                16 : "S", 17 : "Cl", 18 : "Ar", 19 : "K", 20 : "Ca",
                21 : "Sc", 22 : "Ti", 23 : "V", 24 : "Cr", 25 : "Mn",
                26 : "Fe", 27 : "Co", 28 : "Ni", 29 : "Cu",
                30 : "Zn", 31 : "Ga", 32 : "Ge", 33 : "As",
                34 : "Se", 35 : "Br", 36 : "Kr", 37 : "Rb",
                38 : "Sr", 39 : "Y", 40 : "Zr", 41 : "Nb", 42 : "Mo",
                43 : "Tc", 44 : "Ru", 45 : "Rh", 46 : "Pd",
                47 : "Ag", 48 : "Cd", 49 : "In", 50 : "Sn",
                51 : "Sb", 52 : "Te", 53 : "I", 54 : "Xe", 55 : "Cs",
                56 : "Ba", 57 : "La", 58 : "Ce", 59 : "Pr",
                60 : "Nd", 61 : "Pm", 62 : "Sm", 63 : "Eu",
                64 : "Gd", 65 : "Tb", 66 : "Dy", 67 : "Ho",
                68 : "Er", 69 : "Tm", 70 : "Yb", 71 : "Lu",
                72 : "Hf", 73 : "Ta", 74 : "W", 75 : "Re", 76 : "Os",
                77 : "Ir", 78 : "Pt", 79 : "Au", 80 : "Hg",
                81 : "Tl", 82 : "Pb", 83 : "Bi", 84 : "Po",
                85 : "At", 86 : "Rn", 87 : "Fr", 88 : "Ra",
                89 : "Ac", 90 : "Th", 91 : "Pa", 92 : "U", 93 : "Np",
                94 : "Pu", 95 : "Am", 96 : "Cm", 97 : "Bk",
                98 : "Cf", 99 : "Es", 100 : "Fm", 101 : "Md",
                102 : "No", 103 : "Lr", 104 : "Rf", 105 : "Db",
                106 : "Sg", 107 : "Bh", 108 : "Hs", 109 : "Mt",
                110 : "Ds", 111 : "Rg", 112 : "Cn", 113 : "Nh",
                114 : "Fl", 115 : "Mc", 116 : "Lv", 117 : "Ts",
                118 : "Og"
                }

            # Create a pymatgen Structure object using the dummy atom positions
            # created earlier
            dummy_structure = pmg.Structure(lattice=self.lattice,
                                species=species_expanded,
                                coords=fractional_expanded)
            i = 0
            for site in dummy_structure:
                for sp in site.species:
                    if ((not from_cif)
                        and self.ignore_H_atoms
                        and self.absorb_H_Z_increase):
                            zs.append(sp.Z+n_H_connected_expanded[i])
                    else:
                        zs.append(sp.Z)
                    try:
                        if ((not from_cif)
                            and self.ignore_H_atoms
                            and self.absorb_H_Z_increase):
                            new_Z = sp.Z+n_H_connected_expanded[i]
                            c = ATOMIC_SCATTERING_PARAMS[atomic_symbols[new_Z]]
                        else:
                            c = ATOMIC_SCATTERING_PARAMS[sp.symbol]
                    except KeyError:
                        raise ValueError("Unable to calculate intensity \
                                        calculation prefix arrays"
                                        "there are no scattering coefficients\
                                        for:" " %s." % sp.symbol)
                    coeffs.append(c)
                    dwfactors.append(debye_waller_factors.get(sp.symbol, 0))
                    # DOUBLE CHECK THIS IS CORRECT FOR OCCUPANCY != 1
                    occus.append(site[site.specie.symbol])
                i += 1

            zs = np.array(zs)
            coeffs = np.array(coeffs)
            occus = np.array(occus)
            dwfactors = np.array(dwfactors)
            if from_cif:
                self.cif_dwfactors = dwfactors
            else:
                if just_asymmetric:
                    self.dwfactors_asymmetric = dwfactors
                else:
                    self.dwfactors = dwfactors

            g_hkl = np.sqrt(np.sum(np.dot(self.hkl,
                self.lattice.reciprocal_lattice_crystallographic.matrix)**2,
                axis=1))
            # d_hkl = 1/g_hkl
            # tt = np.rad2deg(2 * np.arcsin(wavelength / (2*d_hkl)))
            # s = sin(theta) / wavelength = 1 / 2d = |ghkl| / 2 (d = 1/|ghkl|)
            # s = g_hkl / 2
            # Store s^2 since we are using it a few times.
            s2 = (g_hkl / 2)**2
            self.s2 = s2

            fs = []
            dw_correction = []
            for x in s2:
                fs.append(zs - 41.78214 * x * np.sum(coeffs[:, :, 0] * \
                                        np.exp(-coeffs[:, :, 1] * x), axis=1))
                dw_correction.append(np.exp(-1*dwfactors * x))
            fs = np.array(fs)
            dw_correction = np.array(dw_correction).astype(float)

            prefix = np.empty_like(fs)
            for i in range(fs.shape[0]):
                for j in range(fs.shape[1]):
                    if self.ignore_H_atoms and self.absorb_H_occu_increase:
                        new_occu = ((1 + n_H_connected_expanded[j]) / zs[j])
                        prefix[i][j] = fs[i][j] * occus[j] \
                                                * dw_correction[i][j] \
                                                * new_occu
                    else:
                        prefix[i][j] = fs[i][j] * occus[j] * dw_correction[i][j]

            return prefix

    def get_total_degrees_of_freedom(self, verbose=True):
        """[summary]

        Args:
            verbose (bool, optional): [description]. Defaults to True.
        """
        total_dof = 0
        total_external = 0
        total_internal = 0
        total_position = 0
        total_rotation = 0
        for zm in self.zmatrices:
            total_dof += zm.degrees_of_freedom
            total_external += zm.external_degrees_of_freedom
            total_internal += zm.internal_degrees_of_freedom
            total_position += zm.position_degrees_of_freedom
            total_rotation += zm.rotation_degrees_of_freedom
        self.total_degrees_of_freedom = total_dof
        self.total_external_degrees_of_freedom = total_external
        self.total_internal_degrees_of_freedom = total_internal
        self.total_position_degrees_of_freedom = total_position
        self.total_rotation_degrees_of_freedom = total_rotation
        if verbose:
            print("Total degrees of freedom:", total_dof)
            print("Total external degrees of freedom:", total_external, "(pos:",total_position,"rot:",total_rotation,")")
            print("Total internal degrees of freedom:", total_internal)
        zm_torsions = []
        for zm in self.zmatrices:
            if self.ignore_H_atoms:
                if zm.internal_degrees_of_freedom > 0:
                    zm_torsions.append(zm.coords_radians_no_H[:,2][zm.torsion_refineable_indices_no_H])
            else:
                if zm.internal_degrees_of_freedom > 0:
                    zm_torsions.append(zm.coords_radians[:,2][zm.torsion_refineable_indices])
        if len(zm_torsions) > 0:
            self.zm_torsions = np.hstack(zm_torsions)
        else:
            self.zm_torsions = np.array([])
        self.total_dof_calculated = True